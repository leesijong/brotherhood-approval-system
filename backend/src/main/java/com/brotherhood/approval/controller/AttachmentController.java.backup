package com.brotherhood.approval.controller;

import com.brotherhood.approval.dto.BaseResponse;
import com.brotherhood.approval.dto.attachment.AttachmentDto;
import com.brotherhood.approval.dto.attachment.FileUploadResponse;
import com.brotherhood.approval.service.AttachmentService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Optional;

/**
 * 첨부파일 컨트롤러
 * 
 * @author Brotherhood Development Team
 * @version 1.0.0
 * @since 2024-09-17
 */
@Slf4j
@RestController
@RequestMapping("/api/attachments")
@RequiredArgsConstructor
@Tag(name = "첨부파일", description = "첨부파일 관리 관련 API")
public class AttachmentController {
    
    private final AttachmentService attachmentService;
    
    /**
     * 파일 업로드
     */
    @PostMapping("/upload")
    @Operation(summary = "파일 업로드", description = "문서에 첨부파일을 업로드합니다.")
    public ResponseEntity<BaseResponse<FileUploadResponse>> uploadFile(
            @RequestParam("file") MultipartFile file,
            @RequestParam("documentId") String documentId,
            @RequestHeader("X-User-Id") String userId) {
        try {
            FileUploadResponse response = attachmentService.uploadFile(file, documentId, userId);
            return ResponseEntity.ok(BaseResponse.success(response, "파일이 성공적으로 업로드되었습니다"));
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest()
                    .body(BaseResponse.error(e.getMessage()));
        } catch (Exception e) {
            log.error("파일 업로드 오류", e);
            return ResponseEntity.internalServerError()
                    .body(BaseResponse.error("파일 업로드 중 오류가 발생했습니다"));
        }
    }
    
    /**
     * 다중 파일 업로드
     */
    @PostMapping("/upload/multiple")
    @Operation(summary = "다중 파일 업로드", description = "문서에 여러 첨부파일을 업로드합니다.")
    public ResponseEntity<BaseResponse<List<FileUploadResponse>>> uploadMultipleFiles(
            @RequestParam("files") List<MultipartFile> files,
            @RequestParam("documentId") String documentId,
            @RequestHeader("X-User-Id") String userId) {
        try {
            List<FileUploadResponse> responses = attachmentService.uploadMultipleFiles(files, documentId, userId);
            return ResponseEntity.ok(BaseResponse.success(responses, "파일들이 성공적으로 업로드되었습니다"));
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest()
                    .body(BaseResponse.error(e.getMessage()));
        } catch (Exception e) {
            log.error("다중 파일 업로드 오류", e);
            return ResponseEntity.internalServerError()
                    .body(BaseResponse.error("다중 파일 업로드 중 오류가 발생했습니다"));
        }
    }
    
    /**
     * 첨부파일 조회
     */
    @GetMapping("/{id}")
    @Operation(summary = "첨부파일 조회", description = "ID로 첨부파일 정보를 조회합니다.")
    public ResponseEntity<BaseResponse<AttachmentDto>> getAttachmentById(@PathVariable String id) {
        try {
            Optional<AttachmentDto> attachmentOpt = attachmentService.getAttachmentById(id);
            if (attachmentOpt.isPresent()) {
                return ResponseEntity.ok(BaseResponse.success(attachmentOpt.get(), "첨부파일 정보를 조회했습니다"));
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            log.error("첨부파일 조회 오류", e);
            return ResponseEntity.internalServerError()
                    .body(BaseResponse.error("첨부파일 조회 중 오류가 발생했습니다"));
        }
    }
    
    /**
     * 문서별 첨부파일 목록 조회
     */
    @GetMapping("/document/{documentId}")
    @Operation(summary = "문서별 첨부파일 조회", description = "특정 문서의 첨부파일 목록을 조회합니다.")
    public ResponseEntity<BaseResponse<List<AttachmentDto>>> getAttachmentsByDocument(@PathVariable String documentId) {
        try {
            List<AttachmentDto> attachments = attachmentService.getAttachmentsByDocument(documentId);
            return ResponseEntity.ok(BaseResponse.success(attachments, "문서별 첨부파일을 조회했습니다"));
        } catch (Exception e) {
            log.error("문서별 첨부파일 조회 오류", e);
            return ResponseEntity.internalServerError()
                    .body(BaseResponse.error("문서별 첨부파일 조회 중 오류가 발생했습니다"));
        }
    }
    
    /**
     * 파일 다운로드
     */
    @GetMapping("/{id}/download")
    @Operation(summary = "파일 다운로드", description = "첨부파일을 다운로드합니다.")
    public ResponseEntity<Resource> downloadFile(@PathVariable String id) {
        try {
            Optional<AttachmentDto> attachmentOpt = attachmentService.getAttachmentById(id);
            if (attachmentOpt.isPresent()) {
                AttachmentDto attachment = attachmentOpt.get();
                Resource resource = attachmentService.downloadFile(id);
                
                return ResponseEntity.ok()
                        .contentType(MediaType.parseMediaType(attachment.getMimeType()))
                        .header(HttpHeaders.CONTENT_DISPOSITION, 
                                "attachment; filename=\"" + attachment.getOriginalFilename() + "\"")
                        .body(resource);
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            log.error("첨부파일 다운로드 오류", e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * 파일 미리보기
     */
    @GetMapping("/{id}/preview")
    @Operation(summary = "파일 미리보기", description = "첨부파일을 미리보기합니다.")
    public ResponseEntity<Resource> previewFile(@PathVariable String id) {
        try {
            Optional<AttachmentDto> attachmentOpt = attachmentService.getAttachmentById(id);
            if (attachmentOpt.isPresent()) {
                AttachmentDto attachment = attachmentOpt.get();
                Resource resource = attachmentService.previewFile(id);
                
                return ResponseEntity.ok()
                        .contentType(MediaType.parseMediaType(attachment.getMimeType()))
                        .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=\"" + attachment.getOriginalFilename() + "\"")
                        .body(resource);
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            log.error("파일 미리보기 오류", e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * 첨부파일 삭제
     */
    @DeleteMapping("/{id}")
    @Operation(summary = "첨부파일 삭제", description = "첨부파일을 삭제합니다.")
    public ResponseEntity<BaseResponse<Void>> deleteAttachment(
            @PathVariable String id, @RequestHeader("X-User-Id") String userId) {
        try {
            attachmentService.deleteAttachment(id, userId);
            return ResponseEntity.ok(BaseResponse.success(null, "첨부파일이 성공적으로 삭제되었습니다"));
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest()
                    .body(BaseResponse.error(e.getMessage()));
        } catch (Exception e) {
            log.error("첨부파일 삭제 오류", e);
            return ResponseEntity.internalServerError()
                    .body(BaseResponse.error("첨부파일 삭제 중 오류가 발생했습니다"));
        }
    }
    
    /**
     * 첨부파일 정보 수정
     */
    @PutMapping("/{id}")
    @Operation(summary = "첨부파일 정보 수정", description = "첨부파일의 메타데이터를 수정합니다.")
    public ResponseEntity<BaseResponse<AttachmentDto>> updateAttachment(
            @PathVariable String id,
            @RequestBody @Parameter(description = "수정할 정보") AttachmentDto request,
            @RequestHeader("X-User-Id") String userId) {
        try {
            AttachmentDto attachment = attachmentService.updateAttachment(id, request, userId);
            return ResponseEntity.ok(BaseResponse.success(attachment, "첨부파일 정보가 성공적으로 수정되었습니다"));
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest()
                    .body(BaseResponse.error(e.getMessage()));
        } catch (Exception e) {
            log.error("첨부파일 정보 수정 오류", e);
            return ResponseEntity.internalServerError()
                    .body(BaseResponse.error("첨부파일 정보 수정 중 오류가 발생했습니다"));
        }
    }
    
    /**
     * 첨부파일 컨트롤러 테스트
     */
    @GetMapping("/test")
    @Operation(summary = "첨부파일 컨트롤러 테스트", description = "첨부파일 컨트롤러가 정상적으로 작동하는지 테스트합니다.")
    public ResponseEntity<BaseResponse<String>> testAttachmentController() {
        return ResponseEntity.ok(BaseResponse.success("AttachmentController is working!", "첨부파일 컨트롤러가 정상적으로 작동합니다"));
    }
    
    /**
     * 첨부파일 통계 조회
     */
    @GetMapping("/stats")
    @Operation(summary = "첨부파일 통계", description = "첨부파일 관련 통계를 조회합니다.")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<BaseResponse<Object>> getAttachmentStats() {
        try {
            long attachmentCount = attachmentService.getAttachmentCount();
            long totalSizeBytes = attachmentService.getTotalSize();
            
            return ResponseEntity.ok(BaseResponse.success(
                    new Object() {
                        public final long totalAttachments = attachmentCount;
                        public final long totalSize = totalSizeBytes;
                    }, "첨부파일 통계를 조회했습니다"));
        } catch (Exception e) {
            log.error("첨부파일 통계 조회 오류", e);
            return ResponseEntity.internalServerError()
                    .body(BaseResponse.error("첨부파일 통계 조회 중 오류가 발생했습니다"));
        }
    }
}
